include("vnn_parser.jl")

# From vnnlib_filename specify or parse constraints
function get_constraints(vnnlib_filename)
	if vnnlib_filename == "test/test_tiny.vnnlib" || vnnlib_filename == "test/test_small.vnnlib"
		Aᵢ, bᵢ = Matrix{Float64}(undef, 2, 1), Vector{Float64}(undef, 2)
		Aᵢ[1,1] = -1.; Aᵢ[2,1] = 1.
		bᵢ[1] = 1.; bᵢ[2] = 1. 
		Aₒ, bₒ = Matrix{Float64}(undef, 2, 1), Vector{Float64}(undef, 2)
		Aₒ[1,1] = -1.
		bₒ[1] = 100.
	elseif vnnlib_filename == "test/test_prop.vnnlib"
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.30353115613746867, -0.29855281193475053, 0.009549296585513092, 0.009549296585513092, -0.4933803235848431, 0.49999999998567607, -0.3, 0.5, -0.3, 0.5]

		Aₒ = Float64.([ 1 -1 0 0 0;
							 1 0 -1 0 0;
							 1 0 0 -1 0;
							 1 0 0 0 -1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_1.vnnlib"
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [-0.6, 0.679857769, 0.5, 0.5, 0.5, 0.5, -0.45, 0.5, 0.5, -0.45]

		Aₒ = reshape(Float64.([ -1 0 0 0 0]), (1,5))
		bₒ = [-3.991125645861615]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_2.vnnlib"
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [-0.6, 0.679857769, 0.5, 0.5, 0.5, 0.5, -0.45, 0.5, 0.5, -0.45]

		Aₒ = Float64.([ -1 1 0 0 0;
							 -1 0 1 0 0;
							 -1 0 0 1 0;
							 -1 0 0 0 1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_3.vnnlib" 
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.303531156, -0.298552812, 0.009549297, 0.009549297, -0.493380324, 0.5, -0.3, 0.5, -0.3, 0.5]

		Aₒ = Float64.([ 1 -1 0 0 0;
							 1 0 -1 0 0;
							 1 0 0 -1 0;
							 1 0 0 0 -1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_4.vnnlib" # RPM fails on this equality constraint
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.303531156, -0.298552812, 0.009549297, 0.009549297, 0.0, 0.0, -0.318181818, 0.5, -0.083333333, 0.166666667]

		Aₒ = Float64.([ 1 -1 0 0 0;
							 1 0 -1 0 0;
							 1 0 0 -1 0;
							 1 0 0 0 -1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_5.vnnlib"
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.324274257, -0.321785085, -0.031830989, 0.063661977, 0.499999896, -0.499204121, 0.5, -0.227272727, 0.5, -0.166666667]

		Aₒ = Float64.([ 1 0 0 0 -1;
							 0 1 0 0 -1;
							 0 0 1 0 -1;
							 0 0 0 1 -1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_6.vnnlib" # Two separate input sets
		Aᵢ1 = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ1 = [0.129289109, 0.700434925, -0.11140846, 0.499999896, 0.499999896, -0.499204121, 0.5, 0.5, 0.5, 0.5]

		Aᵢ2 = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ2 = [0.129289109, 0.700434925, 0.499999896, -0.11140846, 0.499999896, -0.499204121, 0.5, 0.5, 0.5, 0.5]


		Aₒ = Float64.([ -1 1 0 0 0;
							 -1 0 1 0 0;
							 -1 0 0 1 0;
							 -1 0 0 0 1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ1, Aᵢ2], [bᵢ1, bᵢ2], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_7.vnnlib" # two output sets
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.328422877, 0.679857769, 0.499999896, 0.499999896, 0.499999896, 0.499999896, 0.5, 0.5, 0.5, 0.5]

		Aₒ1 = Float64.([ -1 0 0 1 0;
							 0 -1 0 1 0;
							 0 0 -1 1 0])
		bₒ1 = [0., 0., 0.]

		Aₒ2 = Float64.([ -1 0 0 0 1;
							 0 -1 0 0 1;
							 0 0 -1 0 1])
		bₒ2 = [0., 0., 0.]
		return [Aᵢ], [bᵢ], [Aₒ1, Aₒ2], [bₒ1, bₒ2]
	elseif vnnlib_filename == "acasxu/prop_8.vnnlib" # three output sets
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.328422877, 0.679857769, 0.499999896, -0.374999922, 0.015915494,  0.015915494, 0.045454545, 0.5, 0.0, 0.5]

		Aₒ1 = Float64.([ -1 0 1 0 0;
							 0 -1 1 0 0])
		bₒ1 = [0., 0.]

		Aₒ2 = Float64.([ -1 0 0 1 0;
							 0 -1 0 1 0])
		bₒ2 = [0., 0.]

		Aₒ3 = Float64.([ -1 0 0 0 1;
							 0 -1 0 0 1])
		bₒ3 = [0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ1, Aₒ2, Aₒ3], [bₒ1, bₒ2, bₒ3]
	elseif vnnlib_filename == "acasxu/prop_9.vnnlib"
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [0.295233916, -0.212261512, 0.063661977, -0.022281692, 0.499999896, -0.498408347, 0.5, -0.454545455, 0.5, -0.375]

		Aₒ = Float64.([ 1 0 0 -1 0;
							 0 1 0 -1 0;
							 0 0 1 -1 0;
							 0 0 0 -1 1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename == "acasxu/prop_10.vnnlib"
		Aᵢ = Float64.([  -1  0  0  0  0; # ρ
							   1  0  0  0  0; # ρ
							   0 -1  0  0  0; # θ
							   0  1  0  0  0; # θ
							   0  0 -1  0  0; # ψ
							   0  0  1  0  0; # ψ
							   0  0  0 -1  0; # v_own
							   0  0  0  1  0; # v_own
							   0  0  0  0 -1; # v_int
							   0  0  0  0  1]) # v_int
		bᵢ = [-0.268978427, 0.679857769, -0.11140846, 0.499999896, 0.499999896, -0.498408347, -0.227272727, 0.5, 0.0, 0.5]

		Aₒ = Float64.([ -1 1 0 0 0;
							 -1 0 1 0 0;
							 -1 0 0 1 0;
							 -1 0 0 0 1])
		bₒ = [0., 0., 0., 0.]

		return [Aᵢ], [bᵢ], [Aₒ], [bₒ]
	elseif vnnlib_filename[1:7] == "mnistfc"
		return parse_vnn(vnnlib_filename)
	else
		@show vnnlib_filename
		println("Invalid vnnlib file!")
		return [], [], [], []
	end

end